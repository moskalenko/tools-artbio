#!/usr/bin/env python
# Example usage: python pygo.py
#     -i gorilla.tab
#     -o clean_gorilla.tab

from argparse import ArgumentParser
from argparse import RawTextHelpFormatter
import itertools


def simplify_gene_column(input_file, output_file):
    '''
    Takes as input a tabular file with columns:
    <GO-Term><Description><P-value><FDR><q-value><Enrichment><N><B><n><b><Genes>
    '''
    out = open(output_file, 'w')
    for line in open(input_file, 'r'):
        if 'GO Term\tDescription' in line:
            out.write(line)
            continue
        fields = line.rstrip().split('\t')
        genes = fields[9].split('  -  ')
        newgenes = []
        for item in genes:
            new_item = item.split(', ')[-1]
            newgenes.append(new_item)
        fields[9] = '%s]' % ', '.join(newgenes[:-1])
        out.write('\t'.join(fields))
        out.write('\n')
    out.close()
    return


def GO_to_genelist(clean_file):
    GOdict = {}
    for line in open(clean_file, 'r'):
        if 'GO Term\tDescription' in line:
            continue
        fields = line.rstrip().split('\t')
        GOdict[fields[0]] = fields[9].split(', ')
        print('%s\t%s' % (fields[0], len(GOdict[fields[0]])))
    return GOdict
        

def compute_overlaps_matrix(GOone, GOtwo):
    '''
    takes 2 dictionaries of gene lists
    returns 1 dictionaries of combined keys and values of overlap
    for the combination
    '''
    GOoverlaps = {}
    for one in GOone:
        for two in GOtwo:
            key = "%s(%s)-%s(%s)" % (one, len(GOone[one]), two, len(GOtwo[two]))
            GOoverlaps[key] = list(set(GOone[one]) & set(GOtwo[two]))
    for key in sorted(GOoverlaps):
        print('%s\t%s' % (key, GOoverlaps[key]))
    return GOoverlaps


def compute_selfoverlaps_matrix(GOone):
    '''
    takes 1 dictionaries of gene lists
    returns 1 dictionaries of pairwise keys and values of overlaps
    for the combinations
    '''
    GOoverlaps = {}
    clearpool = []
    for subset in itertools.combinations(GOone.keys(), 2):
        overlap = list(set(GOone[subset[0]]) & set(GOone[subset[1]]))
        if len(overlap) == min(len(GOone[subset[0]]), len(GOone[subset[1]])):
            if len(GOone[subset[0]]) == max(len(GOone[subset[0]]),
                                           len(GOone[subset[1]])):
                clearpool.append(subset[0])
            else:
                clearpool.append(subset[1])
    clearpool = list(set(clearpool))
    for item in clearpool:
        del(GOone[item])

    for subset in itertools.combinations(GOone.keys(), 2):
        key = "%s(%s)-%s(%s)" % (subset[0], len(GOone[subset[0]]),
                                 subset[1], len(GOone[subset[1]]))
        GOoverlaps[key] = list(set(GOone[subset[0]]) & set(GOone[subset[1]]))

    for key in sorted(GOoverlaps):
        print('%s\t%s' % (key, len(GOoverlaps[key])))
    return GOoverlaps


def _parse_cli_options():
    """
    Parse command line options, returning `parse_args` from `ArgumentParser`.
    """
    parser = ArgumentParser(
        formatter_class=RawTextHelpFormatter,
        description='python utilities to parse tabular outputs generated by'
                    'Gorilla http://cbl-gorilla.cs.technion.ac.il/',
        usage=" python %(prog)s <options>")
    parser.add_argument("-i", "--input",
                        dest="input_file",
                        required=True,
                        help="Gorilla tabular file to parse")
    parser.add_argument("-o", "--output",
                        required=True,
                        dest="output_file",
                        help="cleaned Gorilla tabular file")
    return parser.parse_args()


def __main__():
    args = _parse_cli_options()
    input_file = args.input_file
    output_file = args.output_file
    simplify_gene_column(input_file, output_file)
#    GO_to_genelist(output_file)
#    compute_overlaps_matrix(GO_to_genelist(output_file),
#                            GO_to_genelist(output_file))
    compute_selfoverlaps_matrix(GO_to_genelist(output_file))

if __name__ == "__main__":
    __main__()
